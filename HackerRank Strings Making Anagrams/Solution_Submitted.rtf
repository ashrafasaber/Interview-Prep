{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
\readonlydoc1{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red255\green255\blue254;\red0\green0\blue0;
\red19\green120\blue72;\red144\green1\blue18;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c100000;\cssrgb\c100000\c100000\c99608;\cssrgb\c0\c0\c0;
\cssrgb\c3529\c53333\c35294;\cssrgb\c63922\c8235\c8235;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl460\partightenfactor0

\f0\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import\cf4 \strokec4  java.io.*;\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  java.math.*;\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  java.security.*;\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  java.text.*;\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  java.util.*;\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  java.util.concurrent.*;\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  java.util.regex.*;\cb1 \
\
\cf2 \cb3 \strokec2 import\cf4 \strokec4  java.util.ArrayList;\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  java.util.HashMap;\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  java.util.Map;\cb1 \
\
\cf2 \cb3 \strokec2 public\cf4 \strokec4  \cf2 \strokec2 class\cf4 \strokec4  Solution \{\cb1 \
\
\pard\pardeftab720\sl460\partightenfactor0
\cf4 \cb3         \cf2 \strokec2 public\cf4 \strokec4  \cf2 \strokec2 static\cf4 \strokec4  Map<String, Integer> myStri(String a)    \{\cb1 \
\
\cb3         Map<String, Integer>  map= \cf2 \strokec2 new\cf4 \strokec4  HashMap<>();\cb1 \
\
\cb3         \cf2 \strokec2 for\cf4 \strokec4 (\cf2 \strokec2 int\cf4 \strokec4  i=\cf5 \strokec5 0\cf4 \strokec4 ;i<a.length();i++)\cb1 \
\cb3         \{\cb1 \
\cb3             \cf2 \strokec2 if\cf4 \strokec4 (map.containsKey(String.valueOf(a.charAt(i)))) \cb1 \
\cb3             \{\cb1 \
\cb3                 \cf2 \strokec2 int\cf4 \strokec4  val = map.get(String.valueOf(a.charAt(i)));\cb1 \
\cb3                 val+=\cf5 \strokec5 1\cf4 \strokec4 ;\cb1 \
\cb3                 map.put(String.valueOf(a.charAt(i)), val);\cb1 \
\cb3             \}\cb1 \
\cb3             \cf2 \strokec2 else\cf4 \strokec4  \{\cb1 \
\cb3                 map.put(String.valueOf(a.charAt(i)),\cf5 \strokec5 1\cf4 \strokec4 );     \cb1 \
\cb3             \}\cb1 \
\cb3         \}\cb1 \
\cb3         \cf2 \strokec2 return\cf4 \strokec4  map;\cb1 \
\cb3     \}\cb1 \
\
\
\cb3     \cf2 \strokec2 static\cf4 \strokec4  \cf2 \strokec2 int\cf4 \strokec4  makeAnagram(String a, String b) \{\cb1 \
\cb3         \cf2 \strokec2 int\cf4 \strokec4  deletions = \cf5 \strokec5 0\cf4 \strokec4 ;\cb1 \
\
\cb3         Map<String, Integer>  map1= \cf2 \strokec2 new\cf4 \strokec4  HashMap<>();\cb1 \
\cb3         Map<String, Integer>  map2= \cf2 \strokec2 new\cf4 \strokec4  HashMap<>();\cb1 \
\
\cb3         map1 = myStri(a);\cb1 \
\cb3         map2 = myStri(b);\cb1 \
\
\cb3         \cf2 \strokec2 for\cf4 \strokec4 (String x:map1.keySet())\cb1 \
\cb3         \{\cb1 \
\cb3             \cf2 \strokec2 if\cf4 \strokec4 (map2.containsKey(x))\cb1 \
\cb3             \{\cb1 \
\cb3                 deletions += Math.abs(map2.get(x)-map1.get(x));\cb1 \
\
\cb3             \} \cf2 \strokec2 else\cf4 \strokec4  \{\cb1 \
\cb3                 deletions += map1.get(x);\cb1 \
\cb3             \}\cb1 \
\cb3         \}\cb1 \
\
\cb3         \cf2 \strokec2 for\cf4 \strokec4 (String x:map2.keySet())\cb1 \
\cb3         \{\cb1 \
\cb3             \cf2 \strokec2 if\cf4 \strokec4 (!map1.containsKey(x))\cb1 \
\cb3             \{\cb1 \
\cb3                 deletions += map2.get(x);\cb1 \
\cb3             \}\cb1 \
\cb3         \}\cb1 \
\
\cb3         \cf2 \strokec2 return\cf4 \strokec4  deletions;\cb1 \
\cb3     \}\cb1 \
\cb3     \cf2 \strokec2 private\cf4 \strokec4  \cf2 \strokec2 static\cf4 \strokec4  \cf2 \strokec2 final\cf4 \strokec4  Scanner scanner = \cf2 \strokec2 new\cf4 \strokec4  Scanner(System.in);\cb1 \
\
\cb3     \cf2 \strokec2 public\cf4 \strokec4  \cf2 \strokec2 static\cf4 \strokec4  \cf2 \strokec2 void\cf4 \strokec4  main(String[] args) \cf2 \strokec2 throws\cf4 \strokec4  IOException \{\cb1 \
\cb3         BufferedWriter bufferedWriter = \cf2 \strokec2 new\cf4 \strokec4  BufferedWriter(\cf2 \strokec2 new\cf4 \strokec4  FileWriter(System.getenv(\cf6 \strokec6 "OUTPUT_PATH"\cf4 \strokec4 )));\cb1 \
\
\cb3         String a = scanner.nextLine();\cb1 \
\
\cb3         String b = scanner.nextLine();\cb1 \
\
\cb3         \cf2 \strokec2 int\cf4 \strokec4  res = makeAnagram(a, b);\cb1 \
\
\cb3         bufferedWriter.write(String.valueOf(res));\cb1 \
\cb3         bufferedWriter.newLine();\cb1 \
\
\cb3         bufferedWriter.close();\cb1 \
\
\cb3         scanner.close();\cb1 \
\cb3     \}\cb1 \
\cb3 \}\cb1 \
\
}